// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
 id  String  @id @default(cuid()) @map("_id") 
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
 id  String  @id @default(cuid()) @map("_id") 
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(cuid()) @map("_id") 
  name          String?
  username String? @unique
  password  String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts Account[]
  sessions Session[]
  Post Post[]
   Comment       Comment[]

   @@unique([email, username])
}

model VerificationToken {
  identifier String  @id @default(cuid()) @map("_id") 
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Portfolio {
  id  String  @id @default(cuid()) @map("_id")  
  slug  String  @unique
  description String?
  color String?
  title String
  img   String?
 
}


model Post {
 id  String  @id @default(cuid()) @map("_id") 
  slug String    @unique
  createdAt DateTime  @default(now())
  title    String
  desc      String
  img       String?
  views     Int       @default(0)
  userEmail String
  postUsername String 
  
  user      User      @relation(fields: [userEmail, postUsername], references: [email, username])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}